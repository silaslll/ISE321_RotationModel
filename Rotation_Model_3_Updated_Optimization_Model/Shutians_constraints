#   ##these are Shutians constraints
#     for e in dict["classes"]: 
#         # Preassignment 
#         con_preass_1= m.addConstrs(z[r,d,b]==0 for d in dict["departments"] if d in dict["departments"] 
#                             for r in residentsE[e] for b in dict["block_range"] if b not in blocksE[e])
#         con_preass_2= m.addConstrs(z[r,d,b]==0 for d in dict["departments"] if d not in departmentsE[e] 
#                             for r in residentsE[e] for b in dict["block_range"])
#         con_preass_3= m.addConstrs(x[r,d,w]==0 for d in dict["departments"] if d not in departmentsE[e] 
#                                                 for r in residentsE[e] for w in dict["weeks"])
#         con_preass_4= m.addConstrs(v[r,d,w]==0 for d in dict["departments"] if d not in departmentsE[e] 
#                                                 for r in residentsE[e] for w in dict["weeks"])
#         con_onedept= m.addConstrs(quicksum(z[r,d,b]for d in departmentsE[e])<=1 for r in residentsE[e] for b in blocksE[e])
#         con_reqdept= m.addConstrs(quicksum(z[r,d,b]for b in blocksE[e])>=1   for r in residentsE[e] for d in Dreq[r])
#         con_impblck= m.addConstrs(z[r,d,b]==0 for r in residentsE[e] for b in blocksImp[r]  for d in departmentsE[e])
#         con_novacbk= m.addConstrs(v[r,d,w]==0 for r in residentsE[e] for b in blocksImp[r] for w in blocksBE[e,b] for d in departmentsE[e])
#         con_vac= m.addConstrs(quicksum(v[r,d,w] for w in dict["weeks"] for d in departmentsE[e])==Tvac[r]  for r in residentsE[e])
#         con_time= m.addConstrs(quicksum(z[r,d,b]for b in Block[e])>=Tmin[r,d]for r in residentsE[e] for d in Dept[e])
#         con_time_2= m.addConstrs(quicksum(z[r,d,b]for b in Block[e])<=Tmax[r,d]  for r in residentsE[e]  for d in Dept[e])
#         con_resmin= m.addConstrs(quicksum(z[r,d,b]for r in residentsE[e])>=Rmin[e,d] for d in Dept[e] for b in Block[e])
#         con_resmax= m.addConstrs(quicksum(z[r,d,b]for r in residentsE[e])<=Rmax[e,d] for d in Dept[e] for b in Block[e])
#         con_varblok= m.addConstrs(z[r,d,b]<=1-v[r,d,w] for d in Dbusy[e] for r in residentsE[e] for b in Block[e] for w in Wblock[e,b])
#         con_onevac= m.addConstrs(quicksum(v[r,d,w]for d in Dept[e] for w in Wblock[e,b])<=1 for r in residentsE[e] for b in Block[e])
        
#         # Linkage constraints
#         con_link = m.addConstrs(z[r,d,b]== x[r,d,w]+v[r,d,w] for r in residentsE[e] for d in dict["departments"] for b in Block[e] for w in Wblock[e,b])

#     ## Extra constraints 
#     # For PGY3: Ensure an assignment for NonCardiac Residents 
#     #con_must_r3  = m.addConstrs(quicksum(z[r,d,b]for d in Dreq[r])==1 for r in Res['PGY3'] for b in Block['3'])

#     # For PGY1: Ensure an assignment in each block for Prelim/GU/OMFS
#     # con_must1_r1 = m.addConstrs(quicksum(z[r,d,b] for d in Dposs[r])>=1 for r in Res['PGY1-Prelim']  for b in Block['1'] if b not in Bimp[r])
#     # con_must2_r1 = m.addConstrs(quicksum(z[r,d,b] for d in Dposs[r])>=1 for r in Res['PGY1-GU'] for b in Block['1'] if b not in Bimp[r])
#     # con_must3_r1 = m.addConstrs(quicksum(z[r,d,b] for d in Dposs[r])>=1 for r in Res['PGY1-OMFS'] for b in Block['1'] if b not in Bimp[r])
#     #con_inteview = m.addConstrs(quicksum(z[r,'Interview',b] for b in [5,6,7])>=1  for r in residentsE['1'] if 'Interview' in Dreq[r])

#     # For PFGY1: Do not assign residents to impossible departments
#     #con_limitdept_r1 = m.addConstrs(z[r,d,b]==0 for r in Residents['1'] for b in Block['1'] for d in Dept['1'] if d not in Dposs[r]) 

#     # Additional Constraints: one resident in the group for vacation 

#     #Breast ['1', '3']# Renal ['1', '3']# Thoracic ['1', '3']Trauma ['1', '3']
#     con_team_13 = m.addConstrs(quicksum(v[r,d,w] for r in (Residents['1']+Residents['3']))<=1  for d in ['Breast','Renal','Thoracic','Trauma'] for w in Weeks)

#     # #Overlook ['1', '2', '3', '4']
#     con_team_Overlook = m.addConstrs(quicksum(v[r,d,w]for r in RList)<=1 for d in ['Overlook']for w in Weeks)

#     # #Elective ['1', '4', '5']
#     con_team_Elec = m.addConstrs(quicksum(v[r,d,w] for e in ['1','4','5'] for r in Residents[e])<=1 for d in ['Elective'] for w in Weeks)

#     # # Lap ['1', '3', '5']# CR ['1', '3', '5']
#     con_team_Lap = m.addConstrs(quicksum(v[r,d,w]for e in ['1','3','5']for r in Residents[e])<=1 for d in ['Lap','CR']for w in Weeks)
#     # departmentsE[5] = ['Nights', 'HPB-Chabot', 'CR', 'HPB', 'Lap', 'Elective'] #["heart", "stomach", "ER", "ortho", "brain", "ear", "plastic"]

#     # # Allen ['1', '2', '4']
#     con_team_Allen = m.addConstrs(quicksum(v[r,'Allen',w]for e in ['1','2','4']for r in Residents[e])<=1 for w in Weeks)

#     # # Vascular ['1', '3', '4']
#     con_team_Vasu = m.addConstrs(quicksum(v[r,d,w]for e in ['1','3','4']for r in Residents[e])<=1 for d in ['Vascular']for w in Weeks)

#     # Peds ['1', '2']CTICU ['1','2']
#     con_team_Peds = m.addConstrs(quicksum(v[r,d,w] for e in ['1','2'] for r in Residents[e])<=1  for d in ['Peds','CTICU'] for w in Weeks)

#     # # Nights ['1','4', '5']
#     con_team_nights = m.addConstrs(quicksum(v[r,d,w] for e in ['1','4','5'] for r in Residents[e] for d in ['VTF','Rainbow','Nights'])<=1 for w in Weeks)                                      

#     # # HPB ['1', '4', '5']
#     # con_team_HPB = m.addConstrs(quicksum(v[r,d,w] for e in ['1','4','5'] for r in Residents[e] for d in ['HPB','HPB-Chabot'])<=1 for w in Weeks)      

#     # # ACS ['1','2','4']
#     con_team_ACS = m.addConstrs(quicksum(v[r,d,w] for e in ['1','4','2'] for r in Residents[e]  for d in ['ACS','ACS-OR','Consults'])<=1 for w in Weeks)                                            


#     # Symmetry breaking Constraints: 
#     # for e in RYear:
#     #     con_sym_break = m.addConstrs(quicksum(z[r,d,b] for d in Dept[e])>= quicksum(z[r,d,b+1]for d in Dept[e])
#     #                         for r in Residents[e] for b in Block[e][:len(Block[e])-1])

    